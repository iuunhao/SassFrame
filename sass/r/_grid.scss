@charset "utf-8";
//----------------------------------------------------------------------------------------------------------
// C 网格系统［无关联］［不建议修改］
//----------------------------------------------------------------------------------------------------------
// 
$r-parent-first:     false  !default;
$r-layout-direction: "left"  !default;

@function r-get-span($ratio: 1) {
	@return $ratio * 100;
}

@function r-get-column($ratios: 1, $gutter: $r-gutter) {
	$ratios: if(not $r-parent-first, r-reverse($ratios), $ratios);
	$width: 100;
	@each $ratio in $ratios {
		$gutter: $gutter / $width * 100;
		$width: 100 * $ratio - $gutter + $ratio * $gutter;
	}
	@return $width $gutter;
}

@function r-get-layout-direction() {
	$direction: if($r-layout-direction == "RTL", right, left);
	@return $direction;
}

@function r-replace-nth($list, $index, $value) {
	@if function-exists("set-nth") != true {
		$result: ();
		$index: if($index < 0, length($list) + $index + 1, $index);

		@for $i from 1 through length($list) {
			$result: append($result, if($i == $index, $value, nth($list, $i)));
		}
		@return $result;
	}
	$result: set-nth($list, $index, $value);
	@return $result;
}

@function r-reverse($list) {
	@if function-exists("set-nth") != true {
		$result: ();
		@for $i from length($list) * -1 through -1 {
			$item: nth($list, abs($i));
			@if length($item) > 1 and $recursive {
				$result: append($result, r-reverse($item, $recursive));
			}@else {
				$result: append($result, $item);
			}
	}
	@return $result;
}

  @for $i from 1 through ceil(length($list)/2) {
	$tmp: nth($list, $i);
	$tmp: if(length($tmp) > 1 and $recursive, reverse($tmp, $recursive), $tmp);
	$list: set-nth($list, $i, nth($list, -$i));
	$list: set-nth($list, -$i, $tmp);
  }
  @return $list;
}

@function r-opposite-direction($direction) {
	@if $direction == "left" {
		@return right;
	} @else if $direction == "right" {
		@return left;
	} @else if $direction == "top" {
		@return bottom;
	} @else if $direction == "bottom" {
		@return top;
	} @else if index("ltr" "LTR", $direction) {
		@return rtl;
	} @else if index("rtl" "RTL", $direction) {
		@return ltr;
	} @else {
		@return false;
	}
}

@function r-get-percentage($value) {
	@if $value == 0 {
		@return 0;
	} @else {
		@return $value * 1%;
	}
}

@mixin r-column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $r-gutter) {
	$side: r-get-layout-direction();
	$opposite-side: r-opposite-direction($side);
	$column-widths: r-get-column($ratios, $gutter);
	$margin-last: 0;
	$margin-l: $margin-last;
	$margin-r: nth($column-widths, 2);
	@if $offset != 0 {
		@if $offset < 0 {
			$offset: $offset * -1;
			$offset: nth(r-get-column($offset, nth($column-widths, 2)), 1);
			$margin-last: $offset + nth($column-widths, 2) * 2;
			$margin-r: $margin-last;
		} @else {
			$offset: nth(r-get-column($offset, nth($column-widths, 2)), 1);
			$margin-l: $offset + nth($column-widths, 2);
		}
	}
	float: $side;
	clear: none;
	width: r-get-percentage(nth($column-widths, 1));
	margin: {
		#{$side}: r-get-percentage($margin-l);
		#{$opposite-side}: r-get-percentage($margin-r);
	};

	@if $uncycle != 0 {
		&:nth-of-type(#{$uncycle}n) {
			margin-#{r-opposite-direction($side)}: r-get-percentage($margin-r);
			float: $side;
		}
		&:nth-of-type(#{$uncycle}n + 1) {clear: none; }
	}
	@if $cycle != 0 {
		&:nth-of-type(#{$cycle}n) {
		  margin-#{r-opposite-direction($side)}: r-get-percentage($margin-last);
		  float: r-opposite-direction($side);
		}
		&:nth-of-type(#{$cycle}n + 1) {clear: both; }
	} @else {
		&:last-child {
			margin-#{r-opposite-direction($side)}: r-get-percentage($margin-last);
		}
	}
}

@function r-column-width($ratios: 1, $gutter: $r-gutter) {
	@return r-get-percentage(nth(r-get-column($ratios, $gutter), 1));
}

@function r-column-gutter($ratios: 1, $gutter: $r-gutter) {
	@return r-get-percentage(nth(r-get-column($ratios, $gutter), 2));
}

@mixin r-span($ratio: 1, $offset: 0, $cycle: 0, $uncycle: 0) {
	$side: r-get-layout-direction();
	$opposite-side: r-opposite-direction($side);
	$span-width: r-get-span($ratio);
	$margin-r: 0;
	$margin-l: $margin-r;

	@if $offset != 0 {
		@if $offset < 0 {
			$offset: $offset * -1;
			$margin-r: r-get-span($offset);
		} @else {
	  		$margin-l: r-get-span($offset);
		}
	}
	float: $side; clear: none; width: r-get-percentage($span-width);
	margin: {
		#{$side}: r-get-percentage($margin-l);
		#{$opposite-side}: r-get-percentage($margin-r);
	};
	@if $cycle != 0 {
		&:nth-of-type(#{$cycle}n) { float: $opposite-side; }
		&:nth-of-type(#{$cycle}n + 1) { clear: both; }
	}
	@if $uncycle != 0 {
		&:nth-of-type(#{$uncycle}n) { float: $side; }
		&:nth-of-type(#{$uncycle}n + 1) { clear: none; }
	}
}

@mixin r-shift($ratios: 0, $col-or-span: column, $gutter: $r-gutter) {
	$translate: '';
	$side: r-get-layout-direction();
	@if $side == right {
		$ratios: r-replace-nth($ratios, 0, nth($ratios, 1) * -1);
	}
	@if index("column" "col" "c", $col-or-span) {
		$column-widths: r-get-column($ratios, $gutter);
		$translate: nth($column-widths, 1) + nth($column-widths, 2);
		} @else {
			$translate: r-get-span($ratios);
	}
	position: relative;
	left: r-get-percentage($translate);
}
